2017/10/23 by Shingo Nakamura

■ jetsonsvr
- つくばチャレンジ用プログラム
- JetsonとSSMの仲介をして通信を行うプログラム
- Jetsonへ命令し、Jetsonの状態を取得する

■システム
- SSMにあるJetsonCommandを読み取り、Jetsonへコマンドを送る
- 一方で、Jetsonからの JetsonStatus を受取り、SSMに書き込む
- Jetsonとの通信は UDP/IP で行っている
- jetsonsvrの送信ポートは実行の度に異なり、そこからJetosonのポート54113へ JetsonCommandを送る
- Jetsonからの受信はポート64113で受け取る. 
- Jetson側の送信ポートは何でも良いが、jetson_tcというプログラム(Python)は54112を使っている
- jetson_tc プログラムが別途必要

-----------------------------------           ----------------------
PC                                |           |  JETSON            |
  ----------     ---------------  |           |  ---------------   |
  | SSM    |     | jetsonsvr   |  |  Jetson   |  |  jetson_tc  |   |   ------------
  |        |     |             |  |  Command  |  |    (Python) | <==== |  ThetaS  |
  |        | ==> |  (Any Ports)| ==============> |(54113)      |   |   ------------
  |        |     |             |  |           |  |             |   |
  |        |     |             |  |           |  |             |   |   ------------
  |        | <== |      (64113)| <============== |(54112)      | <==== |Web Camera|
  |        |     |             |  |  Jetson   |  |             |   |   ------------
  ----------     ---------------  |  Status   |  |             |   |
                                  |           |  ---------------   |
-----------------------------------           ----------------------


■通信データ内容 (詳しくは src/Jetson-COM-DATA.hpp ので定義された構造体を見ると良い)
- Jetson Command
  コマンドは1項目で整数値[1,2,3]のいずれかの値
  1.command
     1: Idling ( 何もするな )
     2: Search Person ( 人探せ )
     3: Detect Signal ( 信号検出せよ )
  
- Jetson Status
  Jetsonの状態を表すデータ．６つの項目からなる．
  1.jetsonStatus (Jetson状態)
     0: 異常( Jetsonから1秒以上通信が無い )
     1: Idling中
     2: 人検探索中
     3: 信号検出中
  2.thetasStatus (ThetaSの状態)
     0: 異常( ThetaSのデータが取得できない )
     1: 正常( ThetaSのデータを取得できている )
  3.webcamStatus (Webカメラ の状態)
     0: 異常( Webカメラのデータが取得できない )
     1: 正常( Webカメラのデータを取得できている )
  4.personResult (人探索結果)
     0: その他 ( 人検出していない時や異常時の時など )
     1: 発見した
     2: 発見なし
  5.personPos (人を発見した時の人の位置)
     [-Pi, +Pi] の実数値．単位はラジアン.
  6.signalResult (信号検出結果)
     0: その他 ( 信号検出していない時や異常時の時など )
     1: 青
     2: 赤
     3: 消灯中


■ プログラムのビルド
- ビルド前にソース src/jetsonsvr.cpp の書き換え
  使用する PC と Jetson のIPに書き換える
  22行目: char PC_IP[] = "172.29.***.***";
  23行目: char JETSON_IP[] = "172.29.***.***";
  (将来的には設定ファイルから読み込むようにしたい)

- cmake -> make でビルド

- bin/ に３つの実行ファイルが生成される．2,3はテスト用プログラム．
    1.jetsonsvr    (main program)
    2.test-command (SSM へコマンドを送るテストプログラム)
    3.test-viewer  (SSM のJetsonStatus を読み取るテストプログラム)

- どのプログラムもコマンドオプションは -o で ssm のIDを指定できるだけ

- テストプログラムをする時は、
   1.test-command
   2.jetsonsvr
   3.test-viewer
  の順番で実行する

【テストプログラム時の流れ】
--------------------------------------------------
| PC                                             | 
|                     -------     -------------  | 
|                     | SSM |     | jetsonsvr |  | Jetson
|  ---------------    |     |     |           |  | Command   ---------------
|  |test-command |==> |     | ==> |           | ===========> |             |
|  ---------------    |     |     |           |  |           |   JETSON    |
|  ---------------    |     |     |           |  |           |             |
|  |test-viewer  |<== |     | <== |           | <=========== |             |
|  ---------------    |     |     |           |  |  Jetson   ---------------
|                     -------     -------------  |  Status
|                                                | 
--------------------------------------------------


■ その他
- TCP ではなく UDPを使っているので、Jetson側(jetson_tc.py)がなくても単体でプログラムは動作可能
